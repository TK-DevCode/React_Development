{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiaan.kemp\\\\Documents\\\\Tiaan\\\\Personal\\\\Software Development\\\\Web Development\\\\Repository\\\\React_Development\\\\Udemy\\\\01-starting-setup\\\\src\\\\Components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\"; // useState is a React Hook\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpenseForm(props) {\n  _s();\n  // use Hooks can only be called in React components non normal JS\n  // Hooks are used to re-evaluate the data when an onClick/onWhatEver Handler has been triggered to update the value and redraw it on the screen \n\n  // With the useState you create a special kind of variable. useState gets passed the initial value as a argument\n  // useState returns 2 things for us: 1. Gives us access to this special variable\n  // 2. Returns a function that we can call to assign a new value to the variable\n  // Summary: useState returns an Array = [value itself, updating function]\n\n  // You can use destucturing to store both returned elements into seperate variables/constants\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  let create = false;\n  let cancel = false;\n  function titleChangeHandler(event) {\n    setEnteredTitle(event.target.value);\n    // Every time the onChange Event is triggered the current entered value is stored in enteredTitle,\n    //through the state fuction\n  }\n\n  function amountChangeHandler(event) {\n    setEnteredAmount(event.target.value);\n    //value returned by event.target.value will always be a string\n  }\n\n  function dateChangeHandler(event) {\n    setEnteredDate(event.target.value);\n  }\n  function submitHandler(event) {\n    event.preventDefault(); // By default a button placed inside a form will act as a submit button and reload the browser\n    // By page will reload because of a request being sent to the sever to submit the form\n    // But we don't want that, we want to control the submit with JavaScript\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate) // Construct a new date , this will pharse the date string into Date() to create a new Date object\n    };\n    //When the Add Expense button is pressed the submit Handler is triggered and the expense data gets build and passed to NewExpense\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  }\n  function createButtonState(event) {\n    console.log(event);\n    create = true;\n  }\n  function cancelButtonState(event) {\n    console.log(event);\n    cancel = true;\n  }\n  if (create == true || cancel == true) {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: titleChangeHandler,\n            value: enteredTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            onChange: amountChangeHandler,\n            value: enteredAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"2018-01-01\",\n            max: \"2023-12-31\",\n            onChange: dateChangeHandler,\n            value: enteredDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: cancelButtonState,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__action\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: createButtonState,\n          children: \"Create New Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__action\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: createButtonState,\n        children: \"Create New Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","create","cancel","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","createButtonState","console","log","cancelButtonState"],"sources":["C:/Users/tiaan.kemp/Documents/Tiaan/Personal/Software Development/Web Development/Repository/React_Development/Udemy/01-starting-setup/src/Components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\"; // useState is a React Hook\r\nimport \"./ExpenseForm.css\";\r\n\r\nfunction ExpenseForm(props) {\r\n  // use Hooks can only be called in React components non normal JS\r\n  // Hooks are used to re-evaluate the data when an onClick/onWhatEver Handler has been triggered to update the value and redraw it on the screen \r\n\r\n  // With the useState you create a special kind of variable. useState gets passed the initial value as a argument\r\n  // useState returns 2 things for us: 1. Gives us access to this special variable\r\n  // 2. Returns a function that we can call to assign a new value to the variable\r\n  // Summary: useState returns an Array = [value itself, updating function]\r\n\r\n  // You can use destucturing to store both returned elements into seperate variables/constants\r\n\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  let create = false;\r\n  let cancel = false;\r\n  \r\n\r\n  function titleChangeHandler(event) {\r\n    setEnteredTitle(event.target.value);\r\n    // Every time the onChange Event is triggered the current entered value is stored in enteredTitle,\r\n    //through the state fuction\r\n  }\r\n  function amountChangeHandler(event) {\r\n    setEnteredAmount(event.target.value);\r\n    //value returned by event.target.value will always be a string\r\n  }\r\n  function dateChangeHandler(event) {\r\n    setEnteredDate(event.target.value);\r\n  }\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault(); // By default a button placed inside a form will act as a submit button and reload the browser\r\n    // By page will reload because of a request being sent to the sever to submit the form\r\n    // But we don't want that, we want to control the submit with JavaScript\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate), // Construct a new date , this will pharse the date string into Date() to create a new Date object\r\n    };\r\n    //When the Add Expense button is pressed the submit Handler is triggered and the expense data gets build and passed to NewExpense\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  }\r\n  function createButtonState(event){\r\n    console.log(event);\r\n    create = true;\r\n  }\r\n  function cancelButtonState(event){\r\n    console.log(event);\r\n    cancel = true;\r\n  }\r\n  \r\n  if(create == true || cancel == true){\r\n    return (\r\n      <form onSubmit={submitHandler}>\r\n        <div className=\"new-expense__controls\">\r\n          <div className=\"new-expense__control\">\r\n            <label>Title</label>\r\n            <input\r\n              type=\"text\"\r\n              onChange={titleChangeHandler}\r\n              value={enteredTitle}\r\n            />\r\n          </div>\r\n          <div className=\"new-expense__control\">\r\n            <label>Amount</label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"0.01\"\r\n              step=\"0.01\"\r\n              onChange={amountChangeHandler}\r\n              value={enteredAmount}\r\n              \r\n            />\r\n          </div>\r\n          <div className=\"new-expense__control\">\r\n            <label>Date</label>\r\n            <input\r\n              type=\"date\"\r\n              min=\"2018-01-01\"\r\n              max=\"2023-12-31\"\r\n              onChange={dateChangeHandler}\r\n              value={enteredDate}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"button\" onClick={cancelButtonState}>Cancel</button>\r\n          <button type=\"submit\">Add Expense</button>\r\n          \r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  else{\r\n    return (\r\n      <div>           \r\n        <div className=\"new-expense__action\">\r\n          <button type=\"button\" onClick={createButtonState}>Create New Expense</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>           \r\n      <div className=\"new-expense__action\">\r\n        <button type=\"button\" onClick={createButtonState}>Create New Expense</button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  \r\n}\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}