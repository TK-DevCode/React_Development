{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tiaan.kemp\\\\Documents\\\\Tiaan\\\\Personal\\\\Software Development\\\\Web Development\\\\Repository\\\\React_Development\\\\Udemy\\\\01-starting-setup\\\\src\\\\Components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\"; // useState is a React Hook\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExpenseForm(props) {\n  _s();\n  // use Hooks can only be called in React components non normal JS\n  // Hooks are used to re-evaluate the data when an onClick/onWhatEver Handler has been triggered to update the value and redraw it on the screen\n\n  // With the useState you create a special kind of variable. useState gets passed the initial value as a argument\n  // useState returns 2 things for us: 1. Gives us access to this special variable\n  // 2. Returns a function that we can call to assign a new value to the variable\n  // Summary: useState returns an Array = [value itself, updating function]\n\n  // You can use destucturing to store both returned elements into seperate variables/constants\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  const [create, createButtonState] = useState(\"\");\n  const [cancel, cancelButtonState] = useState(\"\");\n  function titleChangeHandler(event) {\n    setEnteredTitle(event.target.value);\n    // Every time the onChange Event is triggered the current entered value is stored in enteredTitle,\n    //through the state fuction\n  }\n\n  function amountChangeHandler(event) {\n    setEnteredAmount(event.target.value);\n    //value returned by event.target.value will always be a string\n  }\n\n  function dateChangeHandler(event) {\n    setEnteredDate(event.target.value);\n  }\n  function submitHandler(event) {\n    event.preventDefault(); // By default a button placed inside a form will act as a submit button and reload the browser\n    // By page will reload because of a request being sent to the sever to submit the form\n    // But we don't want that, we want to control the submit with JavaScript\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate) // Construct a new date , this will pharse the date string into Date() to create a new Date object\n    };\n    //When the Add Expense button is pressed the submit Handler is triggered and the expense data gets build and passed to NewExpense\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  }\n  function createState(event) {\n    console.log(event);\n  }\n  function cancelState(event) {\n    console.log(event);\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler,\n          value: enteredTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler,\n          value: enteredAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2018-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler,\n          value: enteredDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: cancelState,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__action\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: createState,\n        children: \"Create New Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(ExpenseForm, \"6G++D7WhqNOfD83coSyCg5foO9c=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","create","createButtonState","cancel","cancelButtonState","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","createState","console","log","cancelState"],"sources":["C:/Users/tiaan.kemp/Documents/Tiaan/Personal/Software Development/Web Development/Repository/React_Development/Udemy/01-starting-setup/src/Components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\"; // useState is a React Hook\r\nimport \"./ExpenseForm.css\";\r\n\r\nfunction ExpenseForm(props) {\r\n  // use Hooks can only be called in React components non normal JS\r\n  // Hooks are used to re-evaluate the data when an onClick/onWhatEver Handler has been triggered to update the value and redraw it on the screen\r\n\r\n  // With the useState you create a special kind of variable. useState gets passed the initial value as a argument\r\n  // useState returns 2 things for us: 1. Gives us access to this special variable\r\n  // 2. Returns a function that we can call to assign a new value to the variable\r\n  // Summary: useState returns an Array = [value itself, updating function]\r\n\r\n  // You can use destucturing to store both returned elements into seperate variables/constants\r\n\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  const [create , createButtonState] = useState(\"\");\r\n  const [cancel , cancelButtonState] = useState(\"\");\r\n\r\n  function titleChangeHandler(event) {\r\n    setEnteredTitle(event.target.value);\r\n    // Every time the onChange Event is triggered the current entered value is stored in enteredTitle,\r\n    //through the state fuction\r\n  }\r\n  function amountChangeHandler(event) {\r\n    setEnteredAmount(event.target.value);\r\n    //value returned by event.target.value will always be a string\r\n  }\r\n  function dateChangeHandler(event) {\r\n    setEnteredDate(event.target.value);\r\n  }\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault(); // By default a button placed inside a form will act as a submit button and reload the browser\r\n    // By page will reload because of a request being sent to the sever to submit the form\r\n    // But we don't want that, we want to control the submit with JavaScript\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate), // Construct a new date , this will pharse the date string into Date() to create a new Date object\r\n    };\r\n    //When the Add Expense button is pressed the submit Handler is triggered and the expense data gets build and passed to NewExpense\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  }\r\n  function createState(event) {\r\n    console.log(event);\r\n    \r\n    \r\n  }\r\n  function cancelState(event) {\r\n    console.log(event);\r\n    \r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={titleChangeHandler}\r\n            value={enteredTitle}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n            value={enteredAmount}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2018-01-01\"\r\n            max=\"2023-12-31\"\r\n            onChange={dateChangeHandler}\r\n            value={enteredDate}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={cancelState}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"new-expense__action\">\r\n        <button type=\"button\" onClick={createState}>\r\n          Create New Expense\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}